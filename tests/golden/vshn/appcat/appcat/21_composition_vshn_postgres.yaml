apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: '10'
    metadata.appcat.vshn.io/description: PostgreSQL instances by VSHN
    metadata.appcat.vshn.io/displayname: VSHN Managed PostgreSQL
    metadata.appcat.vshn.io/end-user-docs-url: https://docs.appuio.cloud/appcat/vshn-dbaas/postgresql/create.html
    metadata.appcat.vshn.io/flavor: standalone
    metadata.appcat.vshn.io/product-description: https://products.docs.vshn.ch/products/appcat/postgresql.html
    metadata.appcat.vshn.io/zone: rma1
  labels:
    metadata.appcat.vshn.io/offered: 'true'
    metadata.appcat.vshn.io/serviceID: vshn-postgresql
    name: vshnpostgres.vshn.appcat.vshn.io
  name: vshnpostgres.vshn.appcat.vshn.io
spec:
  compositeTypeRef:
    apiVersion: vshn.appcat.vshn.io/v1
    kind: XVSHNPostgreSQL
  resources:
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Namespace
              metadata:
                labels:
                  appcat.vshn.io/claim-namespace: ''
                  appcat.vshn.io/servicename: postgresql-standalone
                name: ''
          managementPolicy: Observe
          providerConfigRef:
            name: kubernetes
      patches:
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: ns-observer-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.manifest.metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: status.atProvider.manifest.metadata.labels[appuio.io/organization]
          toFieldPath: metadata.labels[appuio.io/organization]
          type: ToCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Namespace
              metadata:
                labels:
                  appcat.vshn.io/claim-namespace: ''
                  appcat.vshn.io/servicename: postgresql-standalone
                name: ''
          providerConfigRef:
            name: kubernetes
      patches:
<<<<<<< HEAD
<<<<<<< HEAD
        - patchSetName: annotations
          type: PatchSet
        - patchSetName: labels
          type: PatchSet
<<<<<<< HEAD
=======
        - fromFieldPath: status.conditions
          toFieldPath: status.namespaceDebug
          type: ToCompositeFieldPath
=======
>>>>>>> 60f0c0a (Remove harmful annotation and label patchsets)
>>>>>>> 7c2aabd (Remove harmful annotation and label patchsets)
=======
        - fromFieldPath: status.conditions
          toFieldPath: status.namespaceDebug
          type: ToCompositeFieldPath
>>>>>>> 0e335d5 (Remove patchset functions)
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: vshn-postgresql-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.manifest.metadata.labels[appcat.vshn.io/claim-namespace]
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[appuio.io/organization]
          toFieldPath: spec.forProvider.manifest.metadata.labels[appuio.io/organization]
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: stackgres.io/v1
              kind: SGInstanceProfile
              metadata: {}
              spec:
                cpu: ''
                initContainers:
                  cluster-reconciliation-cycle:
                    cpu: 100m
                    memory: 100Mi
                  pgbouncer-auth-file:
                    cpu: 100m
                    memory: 100Mi
                  relocate-binaries:
                    cpu: 100m
                    memory: 100Mi
                  setup-arbitrary-user:
                    cpu: 100m
                    memory: 100Mi
                  setup-scripts:
                    cpu: 100m
                    memory: 100Mi
                memory: ''
          providerConfigRef:
            name: kubernetes
      patches:
<<<<<<< HEAD
<<<<<<< HEAD
        - patchSetName: annotations
          type: PatchSet
        - patchSetName: labels
          type: PatchSet
<<<<<<< HEAD
=======
        - fromFieldPath: status.conditions
          toFieldPath: status.profileDebug
          type: ToCompositeFieldPath
=======
>>>>>>> 60f0c0a (Remove harmful annotation and label patchsets)
>>>>>>> 7c2aabd (Remove harmful annotation and label patchsets)
=======
        - fromFieldPath: status.conditions
          toFieldPath: status.profileDebug
          type: ToCompositeFieldPath
>>>>>>> 0e335d5 (Remove patchset functions)
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-profile'
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.memory
          toFieldPath: spec.forProvider.manifest.spec.memory
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.cpu
          toFieldPath: spec.forProvider.manifest.spec.cpu
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: stackgres.io/v1
              kind: SGPostgresConfig
              metadata: {}
              spec:
                postgresVersion: ''
                postgresql.conf: {}
          providerConfigRef:
            name: kubernetes
      patches:
<<<<<<< HEAD
<<<<<<< HEAD
        - patchSetName: annotations
          type: PatchSet
        - patchSetName: labels
          type: PatchSet
<<<<<<< HEAD
=======
        - fromFieldPath: status.conditions
          toFieldPath: status.pgconfigDebug
          type: ToCompositeFieldPath
=======
>>>>>>> 60f0c0a (Remove harmful annotation and label patchsets)
>>>>>>> 7c2aabd (Remove harmful annotation and label patchsets)
=======
        - fromFieldPath: status.conditions
          toFieldPath: status.pgconfigDebug
          type: ToCompositeFieldPath
>>>>>>> 0e335d5 (Remove patchset functions)
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-pgconf'
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.service.majorVersion
          toFieldPath: spec.forProvider.manifest.spec.postgresVersion
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.service.pgSettings
          toFieldPath: spec.forProvider.manifest.spec[postgresql.conf]
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: stackgres.io/v1
              kind: SGCluster
              metadata: {}
              spec:
                configurations:
                  sgPostgresConfig: ''
                instances: 1
                pods:
                  persistentVolume:
                    size: ''
                postgres:
                  version: ''
                sgInstanceProfile: ''
          providerConfigRef:
            name: kubernetes
      patches:
<<<<<<< HEAD
<<<<<<< HEAD
        - patchSetName: annotations
          type: PatchSet
        - patchSetName: labels
          type: PatchSet
<<<<<<< HEAD
=======
        - fromFieldPath: status.conditions
          toFieldPath: status.pgclusterDebug
          type: ToCompositeFieldPath
=======
>>>>>>> 60f0c0a (Remove harmful annotation and label patchsets)
>>>>>>> 7c2aabd (Remove harmful annotation and label patchsets)
=======
        - fromFieldPath: status.conditions
          toFieldPath: status.pgclusterDebug
          type: ToCompositeFieldPath
>>>>>>> 0e335d5 (Remove patchset functions)
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-cluster'
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.disk
          toFieldPath: spec.forProvider.manifest.spec.pods.persistentVolume.size
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.service.majorVersion
          toFieldPath: spec.forProvider.manifest.spec.postgres.version
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.sgInstanceProfile
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.configurations.sgPostgresConfig
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Secret
              metadata: {}
              stringData:
                POSTGRESQL_DB: postgres
                POSTGRESQL_HOST: ''
                POSTGRESQL_PORT: '5432'
                POSTGRESQL_USER: postgres
          providerConfigRef:
            name: kubernetes
          references:
            - patchesFrom:
                apiVersion: v1
                fieldPath: data.superuser-password
                kind: Secret
                name: ''
                namespace: ''
              toFieldPath: data.POSTGRESQL_PASSWORD
          writeConnectionSecretToRef:
            name: ''
            namespace: ''
      connectionDetails:
        - fromConnectionSecretKey: POSTGRESQL_URL
          name: POSTGRESQL_URL
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_DB
          name: POSTGRESQL_DB
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_HOST
          name: POSTGRESQL_HOST
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_PORT
          name: POSTGRESQL_PORT
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_USER
          name: POSTGRESQL_USER
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_PASSWORD
          name: POSTGRESQL_PASSWORD
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: ca.crt
          name: ca.crt
          type: FromConnectionSecretKey
      patches:
<<<<<<< HEAD
<<<<<<< HEAD
        - patchSetName: annotations
          type: PatchSet
        - patchSetName: labels
          type: PatchSet
<<<<<<< HEAD
=======
        - fromFieldPath: status.conditions
          toFieldPath: status.secretDebug
          type: ToCompositeFieldPath
=======
>>>>>>> 60f0c0a (Remove harmful annotation and label patchsets)
>>>>>>> 7c2aabd (Remove harmful annotation and label patchsets)
=======
        - fromFieldPath: status.conditions
          toFieldPath: status.secretDebug
          type: ToCompositeFieldPath
>>>>>>> 0e335d5 (Remove patchset functions)
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-connection'
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - string:
                fmt: '%s-connection'
              type: string
          type: FromCompositeFieldPath
        - combine:
            strategy: string
            string:
              fmt: '%s.vshn-postgresql-%s.svc.cluster.local'
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/composite]
              - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.stringData.POSTGRESQL_HOST
          type: CombineFromComposite
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[0].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[0].patchesFrom.name
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.writeConnectionSecretToRef.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - string:
                fmt: '%s-connection'
              type: string
          type: FromCompositeFieldPath
    - base:
<<<<<<< HEAD
=======
        apiVersion: appcat.vshn.io/v1
        kind: XObjectBucket
        metadata:
          name: ''
        spec:
          parameters:
            bucketName: ''
            region: ch-gva-2
          writeConnectionSecretToRef:
            name: ''
            namespace: ''
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.s3BucketDebug
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.parameters.bucketName
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.writeConnectionSecretToRef.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - string:
                fmt: pgbucket-%s
              type: string
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: stackgres.io/v1beta1
              kind: SGObjectStorage
              metadata:
                name: ''
                namespace: ''
              spec:
                s3Compatible:
                  awsCredentials:
                    secretKeySelectors:
                      accessKeyId:
                        key: AWS_ACCESS_KEY_ID
                        name: ''
                      secretAccessKey:
                        key: AWS_SECRET_ACCESS_KEY
                        name: ''
                  bucket: ''
                  enablePathStyleAddressing: true
                  endpoint: https://sos-ch-gva-2.exo.io
                  region: ch-gva-2
                type: s3Compatible
          providerConfigRef:
            name: kubernetes
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.s3BackupConfigDebug
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-object-storage'
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - string:
                fmt: sgbackup-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.s3Compatible.bucket
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.spec.writeConnectionSecretToRef.namespace
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.s3Compatible.awsCredentials.secretKeySelectors.accessKeyId.name
          transforms:
            - string:
                fmt: pgbucket-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.s3Compatible.awsCredentials.secretKeySelectors.secretAccessKey.name
          transforms:
            - string:
                fmt: pgbucket-%s
              type: string
          type: FromCompositeFieldPath
    - base:
>>>>>>> 7c2aabd (Remove harmful annotation and label patchsets)
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: networking.k8s.io/v1
              kind: NetworkPolicy
              metadata: {}
              spec:
                ingress:
                  - from:
                      - namespaceSelector:
                          matchLabels:
                            kubernetes.io/metadata.name: ''
                podSelector: {}
                policyTypes:
                  - Ingress
          providerConfigRef:
            name: kubernetes
      patches:
<<<<<<< HEAD
<<<<<<< HEAD
        - patchSetName: annotations
          type: PatchSet
        - patchSetName: labels
          type: PatchSet
<<<<<<< HEAD
=======
        - fromFieldPath: status.conditions
          toFieldPath: status.networkPolicyDebug
          type: ToCompositeFieldPath
=======
>>>>>>> 60f0c0a (Remove harmful annotation and label patchsets)
>>>>>>> 7c2aabd (Remove harmful annotation and label patchsets)
=======
        - fromFieldPath: status.conditions
          toFieldPath: status.networkPolicyDebug
          type: ToCompositeFieldPath
>>>>>>> 0e335d5 (Remove patchset functions)
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-network-policy'
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - string:
                fmt: allow-from-claim-namespace-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.manifest.spec.ingress[0].from[0].namespaceSelector.matchLabels[kubernetes.io/metadata.name]
          type: FromCompositeFieldPath
  writeConnectionSecretsToNamespace: syn-crossplane
